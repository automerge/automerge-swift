{
  "includedArchiveIdentifiers" : [
    "com.github.automerge.automerge-swift"
  ],
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Essentials",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Creating or loading a document",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/init(loglevel:)",
                "title" : "init(logLevel: LogVerbosity)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/document\/init(_:loglevel:)",
                "title" : "init(Data, logLevel: LogVerbosity) throws",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "title" : "Log levels",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/erroronly",
                    "title" : "case errorOnly",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/debug",
                    "title" : "case debug",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/tracing",
                    "title" : "case tracing",
                    "type" : "case"
                  },
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/_(_:_:)-5qdhi",
                    "title" : "static func < (LogVerbosity, LogVerbosity) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/init(rawvalue:)",
                    "title" : "init?(rawValue: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/candebug()",
                    "title" : "func canDebug() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/cantrace()",
                    "title" : "func canTrace() -> Bool",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'...(_:)-1o73a",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'...(_:)-nira",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/_(_:_:)-1i3hg",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/_=(_:_:)-329ct",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/_=(_:_:)-86dq6",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/logverbosity\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/logverbosity\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/logverbosity\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/logverbosity",
                "title" : "LogVerbosity",
                "type" : "enum"
              },
              {
                "title" : "Inspecting Documents",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/actor",
                "title" : "var actor: ActorId",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/actorid\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/automerge\/actorid\/init(data:)",
                    "title" : "init?(data: Data)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/automerge\/actorid\/init(uuid:)",
                    "title" : "init(uuid: UUID)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/actorid\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/actorid\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/actorid\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/actorid\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/actorid",
                "title" : "ActorId",
                "type" : "struct"
              },
              {
                "path" : "\/documentation\/automerge\/document\/objecttype(obj:)",
                "title" : "func objectType(obj: ObjId) -> ObjType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/path(obj:)",
                "title" : "func path(obj: ObjId) throws -> [PathElement]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/lookuppath(path:)",
                "title" : "func lookupPath(path: String) throws -> ObjId?",
                "type" : "method"
              },
              {
                "title" : "Reading maps",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/get(obj:key:)",
                "title" : "func get(obj: ObjId, key: String) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/getall(obj:key:)",
                "title" : "func getAll(obj: ObjId, key: String) throws -> Set<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/keys(obj:)",
                "title" : "func keys(obj: ObjId) -> [String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/mapentries(obj:)",
                "title" : "func mapEntries(obj: ObjId) throws -> [(String, Value)]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/length(obj:)",
                "title" : "func length(obj: ObjId) -> UInt64",
                "type" : "method"
              },
              {
                "title" : "Updating maps",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/put(obj:key:value:)",
                "title" : "func put(obj: ObjId, key: String, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/putobject(obj:key:ty:)",
                "title" : "func putObject(obj: ObjId, key: String, ty: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/delete(obj:key:)",
                "title" : "func delete(obj: ObjId, key: String) throws",
                "type" : "method"
              },
              {
                "title" : "Reading lists",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/get(obj:index:)",
                "title" : "func get(obj: ObjId, index: UInt64) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/getall(obj:index:)",
                "title" : "func getAll(obj: ObjId, index: UInt64) throws -> Set<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/values(obj:)",
                "title" : "func values(obj: ObjId) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/length(obj:)",
                "title" : "func length(obj: ObjId) -> UInt64",
                "type" : "method"
              },
              {
                "title" : "Updating lists",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/insert(obj:index:value:)",
                "title" : "func insert(obj: ObjId, index: UInt64, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/insertobject(obj:index:ty:)",
                "title" : "func insertObject(obj: ObjId, index: UInt64, ty: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/put(obj:index:value:)",
                "title" : "func put(obj: ObjId, index: UInt64, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/putobject(obj:index:ty:)",
                "title" : "func putObject(obj: ObjId, index: UInt64, ty: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/delete(obj:index:)",
                "title" : "func delete(obj: ObjId, index: UInt64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/splice(obj:start:delete:values:)",
                "title" : "func splice(obj: ObjId, start: UInt64, delete: Int64, values: [ScalarValue]) throws",
                "type" : "method"
              },
              {
                "title" : "Reading Text",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/text(obj:)",
                "title" : "func text(obj: ObjId) throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/length(obj:)",
                "title" : "func length(obj: ObjId) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/marks(obj:)",
                "title" : "func marks(obj: ObjId) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/marksat(obj:position:)",
                "title" : "func marksAt(obj: ObjId, position: Position) throws -> [Mark]",
                "type" : "method"
              },
              {
                "title" : "Updating Text values",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/splicetext(obj:start:delete:value:)",
                "title" : "func spliceText(obj: ObjId, start: UInt64, delete: Int64, value: String?) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/updatetext(obj:value:)",
                "title" : "func updateText(obj: ObjId, value: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/mark(obj:start:end:expand:name:value:)",
                "title" : "func mark(obj: ObjId, start: UInt64, end: UInt64, expand: ExpandMark, name: String, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "title" : "Setting and Reading cursors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/cursor(obj:position:)",
                "title" : "func cursor(obj: ObjId, position: UInt64) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/cursorat(obj:position:heads:)",
                "title" : "func cursorAt(obj: ObjId, position: UInt64, heads: Set<ChangeHash>) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/cursorposition(obj:cursor:)",
                "title" : "func cursorPosition(obj: ObjId, cursor: Cursor) throws -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/cursorpositionat(obj:cursor:heads:)",
                "title" : "func cursorPositionAt(obj: ObjId, cursor: Cursor, heads: Set<ChangeHash>) throws -> UInt64",
                "type" : "method"
              },
              {
                "title" : "Updating counters",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/increment(obj:key:by:)",
                "title" : "func increment(obj: ObjId, key: String, by: Int64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/increment(obj:index:by:)",
                "title" : "func increment(obj: ObjId, index: UInt64, by: Int64) throws",
                "type" : "method"
              },
              {
                "title" : "Reading a document’s history",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/heads()",
                "title" : "func heads() -> Set<ChangeHash>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/gethistory()",
                "title" : "func getHistory() -> [ChangeHash]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/change(hash:)",
                "title" : "func change(hash: ChangeHash) -> Change?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/difference(from:to:)",
                "title" : "func difference(from: Set<ChangeHash>, to: Set<ChangeHash>) -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/difference(since:)",
                "title" : "func difference(since: Set<ChangeHash>) -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/difference(to:)",
                "title" : "func difference(to: Set<ChangeHash>) -> [Patch]",
                "type" : "method"
              },
              {
                "title" : "Reading historical map values",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/getat(obj:key:heads:)",
                "title" : "func getAt(obj: ObjId, key: String, heads: Set<ChangeHash>) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/getallat(obj:key:heads:)",
                "title" : "func getAllAt(obj: ObjId, key: String, heads: Set<ChangeHash>) throws -> Set<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/keysat(obj:heads:)",
                "title" : "func keysAt(obj: ObjId, heads: Set<ChangeHash>) -> [String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/valuesat(obj:heads:)",
                "title" : "func valuesAt(obj: ObjId, heads: Set<ChangeHash>) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/mapentriesat(obj:heads:)",
                "title" : "func mapEntriesAt(obj: ObjId, heads: Set<ChangeHash>) throws -> [(String, Value)]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/lengthat(obj:heads:)",
                "title" : "func lengthAt(obj: ObjId, heads: Set<ChangeHash>) -> UInt64",
                "type" : "method"
              },
              {
                "title" : "Reading historical list values",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/getat(obj:index:heads:)",
                "title" : "func getAt(obj: ObjId, index: UInt64, heads: Set<ChangeHash>) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/getallat(obj:index:heads:)",
                "title" : "func getAllAt(obj: ObjId, index: UInt64, heads: Set<ChangeHash>) throws -> Set<Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/valuesat(obj:heads:)",
                "title" : "func valuesAt(obj: ObjId, heads: Set<ChangeHash>) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/lengthat(obj:heads:)",
                "title" : "func lengthAt(obj: ObjId, heads: Set<ChangeHash>) -> UInt64",
                "type" : "method"
              },
              {
                "title" : "Reading historical text values",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/textat(obj:heads:)",
                "title" : "func textAt(obj: ObjId, heads: Set<ChangeHash>) throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/lengthat(obj:heads:)",
                "title" : "func lengthAt(obj: ObjId, heads: Set<ChangeHash>) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/marksat(obj:heads:)",
                "title" : "func marksAt(obj: ObjId, heads: Set<ChangeHash>) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/marksat(obj:position:heads:)",
                "title" : "func marksAt(obj: ObjId, position: Position, heads: Set<ChangeHash>) throws -> [Mark]",
                "type" : "method"
              },
              {
                "title" : "Saving, forking, and merging documents",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/save()",
                "title" : "func save() -> Data",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/commitwith(message:timestamp:)",
                "title" : "func commitWith(message: String?, timestamp: Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/encodenewchanges()",
                "title" : "func encodeNewChanges() -> Data",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/encodechangessince(heads:)",
                "title" : "func encodeChangesSince(heads: Set<ChangeHash>) throws -> Data",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/applyencodedchanges(encoded:)",
                "title" : "func applyEncodedChanges(encoded: Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/applyencodedchangeswithpatches(encoded:)",
                "title" : "func applyEncodedChangesWithPatches(encoded: Data) throws -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/fork()",
                "title" : "func fork() -> Document",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/forkat(heads:)",
                "title" : "func forkAt(heads: Set<ChangeHash>) throws -> Document",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/merge(other:)",
                "title" : "func merge(other: Document) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/mergewithpatches(other:)",
                "title" : "func mergeWithPatches(other: Document) throws -> [Patch]",
                "type" : "method"
              },
              {
                "title" : "Syncing documents",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/generatesyncmessage(state:)",
                "title" : "func generateSyncMessage(state: SyncState) -> Data?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/receivesyncmessage(state:message:)",
                "title" : "func receiveSyncMessage(state: SyncState, message: Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/document\/receivesyncmessagewithpatches(state:message:)",
                "title" : "func receiveSyncMessageWithPatches(state: SyncState, message: Data) throws -> [Patch]",
                "type" : "method"
              },
              {
                "title" : "Observing Documents",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/objectwillchange",
                "title" : "var objectWillChange: ObservableObjectPublisher",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/document\/objectdidchange",
                "title" : "let objectDidChange: PassthroughSubject<Void, Never>",
                "type" : "property"
              },
              {
                "title" : "Transfering Documents",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/document\/transferrepresentation",
                "title" : "static var transferRepresentation: some TransferRepresentation",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/document\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/document\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/document\/transferrepresentation",
                    "title" : "static var transferRepresentation: some TransferRepresentation",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/document\/transferable-implementations",
                "title" : "Transferable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/document",
            "title" : "Document",
            "type" : "class"
          },
          {
            "path" : "\/documentation\/automerge\/fiveminutequickstart",
            "title" : "Five Minute Quick Start",
            "type" : "article"
          },
          {
            "path" : "\/documentation\/automerge\/automergedatatype",
            "title" : "Saving, loading, and sharing Automerge documents as Data",
            "type" : "article"
          },
          {
            "title" : "Reading and Writing Codable Types",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/automerge\/mappingdata",
            "title" : "Storing and loading your types in Automerge documents",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Creating an Encoder",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/init(doc:strategy:cautiouswrite:reportingloglevel:)",
                "title" : "init(doc: Document, strategy: SchemaStrategy, cautiousWrite: Bool, reportingLoglevel: LogVerbosity)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "title" : "Encoding Strategies",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/schemastrategy\/createwhenneeded",
                    "title" : "case createWhenNeeded",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/schemastrategy\/readonly",
                    "title" : "case readonly",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/schemastrategy\/override",
                    "title" : "case override",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/schemastrategy\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/schemastrategy\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/schemastrategy",
                "title" : "SchemaStrategy",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Log levels",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/erroronly",
                    "title" : "case errorOnly",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/debug",
                    "title" : "case debug",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/tracing",
                    "title" : "case tracing",
                    "type" : "case"
                  },
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/_(_:_:)-5qdhi",
                    "title" : "static func < (LogVerbosity, LogVerbosity) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/init(rawvalue:)",
                    "title" : "init?(rawValue: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/candebug()",
                    "title" : "func canDebug() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/cantrace()",
                    "title" : "func canTrace() -> Bool",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'...(_:)-1o73a",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'...(_:)-nira",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/_(_:_:)-1i3hg",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/_=(_:_:)-329ct",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/_=(_:_:)-86dq6",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/logverbosity\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/logverbosity\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/logverbosity\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/logverbosity\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/logverbosity",
                "title" : "LogVerbosity",
                "type" : "enum"
              },
              {
                "title" : "Encoding",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/encode(_:)-3sde1",
                "title" : "func encode<T>(T?) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/encode(_:)-7gbuh",
                "title" : "func encode<T>(T) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/encode(_:at:)",
                "title" : "func encode<T>(T, at: [CodingKey]) throws",
                "type" : "method"
              },
              {
                "title" : "Inspecting an Encoder",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/doc",
                "title" : "let doc: Document",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/schemastrategy",
                "title" : "var schemaStrategy: SchemaStrategy",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/cautiouswrite",
                "title" : "var cautiousWrite: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/loglevel",
                "title" : "let logLevel: LogVerbosity",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/automergeencoder\/userinfo",
                "title" : "var userInfo: [CodingUserInfoKey : Any]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/automerge\/automergeencoder",
            "title" : "AutomergeEncoder",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating a Decoder",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergedecoder\/init(doc:)",
                "title" : "init(doc: Document)",
                "type" : "init"
              },
              {
                "title" : "Decoding",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergedecoder\/decode(_:)",
                "title" : "func decode<T>(T.Type) throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/automergedecoder\/decode(_:from:)",
                "title" : "func decode<T>(T.Type, from: [CodingKey]) throws -> T",
                "type" : "method"
              },
              {
                "title" : "Inspecting a Decoder",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergedecoder\/doc",
                "title" : "let doc: Document",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/automergedecoder\/userinfo",
                "title" : "var userInfo: [CodingUserInfoKey : Any]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/automerge\/automergedecoder",
            "title" : "AutomergeDecoder",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Encoding Strategies",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/schemastrategy\/createwhenneeded",
                "title" : "case createWhenNeeded",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/schemastrategy\/readonly",
                "title" : "case readonly",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/schemastrategy\/override",
                "title" : "case override",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/schemastrategy\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/schemastrategy\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/schemastrategy",
            "title" : "SchemaStrategy",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Creating an AnyCodingKey",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/anycodingkey\/init(_:)-lfcr",
                "title" : "init(some CodingKey)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/anycodingkey\/init(_:)-6faed",
                "title" : "init(UInt64)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/anycodingkey\/init(_:)-5azuh",
                "title" : "init(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/anycodingkey\/root",
                "title" : "static let ROOT: AnyCodingKey",
                "type" : "property"
              },
              {
                "title" : "Converting Automerge types into AnyCodingKey",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/anycodingkey\/init(_:)-uo0",
                "title" : "init(Automerge.PathElement)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/anycodingkey\/init(_:)-6lrn3",
                "title" : "init(Automerge.Prop)",
                "type" : "init"
              },
              {
                "title" : "Parsing a string into a path of AnyCodingKey",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/anycodingkey\/parsepath(_:)",
                "title" : "static func parsePath(String) throws -> [AnyCodingKey]",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/intvalue",
                    "title" : "var intValue: Int?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/stringvalue",
                    "title" : "var stringValue: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/anycodingkey\/codingkey-implementations",
                "title" : "CodingKey Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/anycodingkey\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/anycodingkey\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/anycodingkey\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automerge\/anycodingkey\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/anycodingkey",
            "title" : "AnyCodingKey",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Log levels",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/logverbosity\/erroronly",
                "title" : "case errorOnly",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/logverbosity\/debug",
                "title" : "case debug",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/logverbosity\/tracing",
                "title" : "case tracing",
                "type" : "case"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/logverbosity\/_(_:_:)-5qdhi",
                "title" : "static func < (LogVerbosity, LogVerbosity) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/logverbosity\/init(rawvalue:)",
                "title" : "init?(rawValue: Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/logverbosity\/candebug()",
                "title" : "func canDebug() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/logverbosity\/cantrace()",
                "title" : "func canTrace() -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/'...(_:)-1o73a",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/'...(_:)-nira",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/_(_:_:)-1i3hg",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/_=(_:_:)-329ct",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/_=(_:_:)-86dq6",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/logverbosity\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/logverbosity\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/logverbosity\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automerge\/logverbosity\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/logverbosity",
            "title" : "LogVerbosity",
            "type" : "enum"
          },
          {
            "title" : "Representing Objects and Values in a Document",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/automerge\/modelingdata",
            "title" : "Using the dynamic schema and core data model",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Types of Automerge objects",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/objtype\/list",
                "title" : "case List",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/objtype\/map",
                "title" : "case Map",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/objtype\/text",
                "title" : "case Text",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/objtype\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/objtype\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/objtype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/objtype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/objtype",
            "title" : "ObjType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Built-in Object Ids",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/objid\/root",
                "title" : "static let ROOT: ObjId",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/objid\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/objid\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/objid\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/objid\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/objid",
            "title" : "ObjId",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Automerge Values",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/value\/object(_:_:)",
                "title" : "case Object(ObjId, ObjType)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/value\/scalar(_:)",
                "title" : "case Scalar(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/value\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/value\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/value\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/value\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/value",
            "title" : "Value",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Automerge Primitives",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/null",
                "title" : "case Null",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/boolean(_:)",
                "title" : "case Boolean(Bool)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/uint(_:)",
                "title" : "case Uint(UInt64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/int(_:)",
                "title" : "case Int(Int64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/f64(_:)",
                "title" : "case F64(Double)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/string(_:)",
                "title" : "case String(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/bytes(_:)",
                "title" : "case Bytes(Data)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/timestamp(_:)",
                "title" : "case Timestamp(Date)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/counter(_:)",
                "title" : "case Counter(Int64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvalue\/unknown(typecode:data:)",
                "title" : "case Unknown(typeCode: UInt8, data: Data)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalue\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/scalarvalue\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/scalarvalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalue\/toscalarvalue()",
                    "title" : "func toScalarValue() -> ScalarValue",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalue\/fromscalarvalue(_:)",
                    "title" : "static func fromScalarValue(ScalarValue) -> Result<ScalarValue, ScalarValueConversionError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automerge\/scalarvalue\/scalarvaluerepresentable-implementations",
                "title" : "ScalarValueRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/scalarvalue",
            "title" : "ScalarValue",
            "type" : "enum"
          },
          {
            "path" : "\/documentation\/automerge\/addressbookexample",
            "title" : "Address Book Example",
            "type" : "article"
          },
          {
            "title" : "Collaborating with Text",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Creating AutomergeText",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/init(_:)",
                "title" : "init(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/init(_:doc:path:)",
                "title" : "init(String, doc: Document, path: String) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/init(doc:objid:)",
                "title" : "init(doc: Document, objId: ObjId) throws",
                "type" : "init"
              },
              {
                "title" : "Linking a new AutomergeText into an Automerge Document",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/bind(doc:path:)",
                "title" : "func bind(doc: Document, path: String) throws",
                "type" : "method"
              },
              {
                "title" : "Retrieving a binding for the text",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/textbinding()",
                "title" : "func textBinding() -> Binding<String>",
                "type" : "method"
              },
              {
                "title" : "Inspecting an AutomergeText instance",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/isbound",
                "title" : "var isBound: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/value",
                "title" : "var value: String",
                "type" : "property"
              },
              {
                "title" : "Encoding and Decoding AutomergeText",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/automergetext\/bind(doc:id:)",
                "title" : "func bind(doc: Document, id: ObjId) throws",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/value",
                    "title" : "case value",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/automergetext\/codingkeys\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/automergetext\/codingkeys",
                "title" : "AutomergeText.CodingKeys",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/automergetext\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/automergetext\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/==(_:_:)",
                    "title" : "static func == (AutomergeText, AutomergeText) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/automergetext\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automerge\/automergetext\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/automergetext\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/automergetext\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/automergetext",
            "title" : "AutomergeText",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/cursor\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/cursor\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/cursor\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/cursor\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/cursor",
            "title" : "Cursor",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/position\/cursor(_:)",
                "title" : "case cursor(Cursor)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/position\/index(_:)",
                "title" : "case index(UInt64)",
                "type" : "case"
              }
            ],
            "path" : "\/documentation\/automerge\/position",
            "title" : "Position",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Inspecting a Mark",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/mark\/name",
                "title" : "let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/mark\/start",
                "title" : "let start: UInt64",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/mark\/end",
                "title" : "let end: UInt64",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/mark\/value",
                "title" : "let value: ScalarValue",
                "type" : "property"
              },
              {
                "title" : "Creating a Mark",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/mark\/init(start:end:name:value:)",
                "title" : "init(start: UInt64, end: UInt64, name: String, value: ScalarValue)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/mark\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/mark\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/mark",
            "title" : "Mark",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Mark Expansion Configurations",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/expandmark\/before",
                "title" : "case before",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/expandmark\/after",
                "title" : "case after",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/expandmark\/both",
                "title" : "case both",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/expandmark\/none",
                "title" : "case none",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/expandmark\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/expandmark\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/expandmark",
            "title" : "ExpandMark",
            "type" : "enum"
          },
          {
            "title" : "Collaborating with Counters",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/init(_:)",
                "title" : "init(Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/init(_:doc:path:)",
                "title" : "init(Int, doc: Document, path: String) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/init(doc:objid:key:)",
                "title" : "init(doc: Document, objId: ObjId, key: any CodingKey) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/isbound",
                "title" : "var isBound: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/value",
                "title" : "var value: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/bind(doc:path:)",
                "title" : "func bind(doc: Document, path: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/increment(by:)",
                "title" : "func increment(by: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/counter\/valuebinding()",
                "title" : "func valueBinding() -> Binding<Int>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/counter\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/counter\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/counter\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automerge\/counter\/==(_:_:)",
                    "title" : "static func == (Counter, Counter) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/counter\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/counter\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automerge\/counter\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/counter\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/counter\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/counter",
            "title" : "Counter",
            "type" : "class"
          },
          {
            "title" : "Synchronizing Documents",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/automerge\/sync",
            "title" : "Synchronizing Automerge Documents",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Creating a SyncState",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/syncstate\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/syncstate\/init(bytes:)",
                "title" : "init(bytes: Data) throws",
                "type" : "init"
              },
              {
                "title" : "Serializing SyncState",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/syncstate\/encode()",
                "title" : "func encode() -> Data",
                "type" : "method"
              },
              {
                "title" : "Resetting SyncState",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/syncstate\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "title" : "Inspecting SyncState",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/syncstate\/theirheads",
                "title" : "var theirHeads: Set<ChangeHash>?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/automerge\/syncstate",
            "title" : "SyncState",
            "type" : "struct"
          },
          {
            "title" : "Inspecting Document History and Changes",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/automerge\/changesandhistory",
            "title" : "Tracking Changes and History",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Inspecting a ChangeHash",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/changehash\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/changehash\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/changehash\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/changehash",
            "title" : "ChangeHash",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Inspecting a Change",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/change\/hash",
                "title" : "let hash: ChangeHash",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/change\/actorid",
                "title" : "let actorId: ActorId",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/change\/deps",
                "title" : "let deps: [ChangeHash]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/change\/bytes",
                "title" : "let bytes: Data",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/changehash\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "title" : "Inspecting Change Metadata",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/change\/message",
                "title" : "let message: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/change\/timestamp",
                "title" : "let timestamp: Date",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/change\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/change\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/change",
            "title" : "Change",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Inspecting a Patch",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/patch\/action",
                "title" : "let action: PatchAction",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/patch\/path",
                "title" : "let path: [PathElement]",
                "type" : "property"
              },
              {
                "title" : "Supporting Types",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Types of Patches",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/conflict(_:_:)",
                    "title" : "case Conflict(ObjId, Prop)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/deletemap(_:_:)",
                    "title" : "case DeleteMap(ObjId, String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/deleteseq(_:)",
                    "title" : "case DeleteSeq(DeleteSeq)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/increment(_:_:_:)",
                    "title" : "case Increment(ObjId, Prop, Int64)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/insert(obj:index:values:)",
                    "title" : "case Insert(obj: ObjId, index: UInt64, values: [Value])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/marks(_:_:)",
                    "title" : "case Marks(ObjId, [Mark])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/put(_:_:_:)",
                    "title" : "case Put(ObjId, Prop, Value)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/splicetext(obj:index:value:marks:)",
                    "title" : "case SpliceText(obj: ObjId, index: UInt64, value: String, marks: [String : Value])",
                    "type" : "case"
                  },
                  {
                    "title" : "Supporting Types",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Property types",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/prop\/index(_:)",
                        "title" : "case Index(UInt64)",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/automerge\/prop\/key(_:)",
                        "title" : "case Key(String)",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/automerge\/prop\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/automerge\/prop\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/prop",
                    "title" : "Prop",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Automerge Values",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/value\/object(_:_:)",
                        "title" : "case Object(ObjId, ObjType)",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/automerge\/value\/scalar(_:)",
                        "title" : "case Scalar(ScalarValue)",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/automerge\/value\/debugdescription",
                            "title" : "var debugDescription: String",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/automerge\/value\/customdebugstringconvertible-implementations",
                        "title" : "CustomDebugStringConvertible Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/automerge\/value\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/automerge\/value\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/value",
                    "title" : "Value",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Creating a new Delete Sequence",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/deleteseq\/init(obj:index:length:)",
                        "title" : "init(obj: ObjId, index: UInt64, length: UInt64)",
                        "type" : "init"
                      },
                      {
                        "title" : "Inspecting a Delete Sequence",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/deleteseq\/obj",
                        "title" : "let obj: ObjId",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/automerge\/deleteseq\/index",
                        "title" : "let index: UInt64",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/automerge\/deleteseq\/length",
                        "title" : "let length: UInt64",
                        "type" : "property"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/automerge\/deleteseq\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/automerge\/deleteseq\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/deleteseq",
                    "title" : "DeleteSeq",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Inspecting a Mark",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/mark\/name",
                        "title" : "let name: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/automerge\/mark\/start",
                        "title" : "let start: UInt64",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/automerge\/mark\/end",
                        "title" : "let end: UInt64",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/automerge\/mark\/value",
                        "title" : "let value: ScalarValue",
                        "type" : "property"
                      },
                      {
                        "title" : "Creating a Mark",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/mark\/init(start:end:name:value:)",
                        "title" : "init(start: UInt64, end: UInt64, name: String, value: ScalarValue)",
                        "type" : "init"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/automerge\/mark\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/automerge\/mark\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/mark",
                    "title" : "Mark",
                    "type" : "struct"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/patchaction\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/patchaction\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/patchaction",
                "title" : "PatchAction",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Path Element",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathelement\/obj",
                    "title" : "let obj: ObjId",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathelement\/prop",
                    "title" : "let prop: Prop",
                    "type" : "property"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathelement\/init(obj:prop:)",
                    "title" : "init(obj: ObjId, prop: Prop)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/pathelement\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/pathelement\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/pathelement",
                "title" : "PathElement",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patch\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/patch\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/patch",
            "title" : "Patch",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Types of Patches",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/conflict(_:_:)",
                "title" : "case Conflict(ObjId, Prop)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/deletemap(_:_:)",
                "title" : "case DeleteMap(ObjId, String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/deleteseq(_:)",
                "title" : "case DeleteSeq(DeleteSeq)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/increment(_:_:_:)",
                "title" : "case Increment(ObjId, Prop, Int64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/insert(obj:index:values:)",
                "title" : "case Insert(obj: ObjId, index: UInt64, values: [Value])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/marks(_:_:)",
                "title" : "case Marks(ObjId, [Mark])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/put(_:_:_:)",
                "title" : "case Put(ObjId, Prop, Value)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/patchaction\/splicetext(obj:index:value:marks:)",
                "title" : "case SpliceText(obj: ObjId, index: UInt64, value: String, marks: [String : Value])",
                "type" : "case"
              },
              {
                "title" : "Supporting Types",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Property types",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/prop\/index(_:)",
                    "title" : "case Index(UInt64)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/prop\/key(_:)",
                    "title" : "case Key(String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/prop\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/prop\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/prop",
                "title" : "Prop",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Automerge Values",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/value\/object(_:_:)",
                    "title" : "case Object(ObjId, ObjType)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/automerge\/value\/scalar(_:)",
                    "title" : "case Scalar(ScalarValue)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/value\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/value\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/value\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/value\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/value",
                "title" : "Value",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Creating a new Delete Sequence",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/deleteseq\/init(obj:index:length:)",
                    "title" : "init(obj: ObjId, index: UInt64, length: UInt64)",
                    "type" : "init"
                  },
                  {
                    "title" : "Inspecting a Delete Sequence",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/deleteseq\/obj",
                    "title" : "let obj: ObjId",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/deleteseq\/index",
                    "title" : "let index: UInt64",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/deleteseq\/length",
                    "title" : "let length: UInt64",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/deleteseq\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/deleteseq\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/deleteseq",
                "title" : "DeleteSeq",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Mark",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/mark\/name",
                    "title" : "let name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/mark\/start",
                    "title" : "let start: UInt64",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/mark\/end",
                    "title" : "let end: UInt64",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/mark\/value",
                    "title" : "let value: ScalarValue",
                    "type" : "property"
                  },
                  {
                    "title" : "Creating a Mark",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/mark\/init(start:end:name:value:)",
                    "title" : "init(start: UInt64, end: UInt64, name: String, value: ScalarValue)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/automerge\/mark\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/automerge\/mark\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/automerge\/mark",
                "title" : "Mark",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/patchaction\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/patchaction\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/patchaction",
            "title" : "PatchAction",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Inspecting a Path Element",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/pathelement\/obj",
                "title" : "let obj: ObjId",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/pathelement\/prop",
                "title" : "let prop: Prop",
                "type" : "property"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/pathelement\/init(obj:prop:)",
                "title" : "init(obj: ObjId, prop: Prop)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathelement\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/pathelement\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/pathelement",
            "title" : "PathElement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Property types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/prop\/index(_:)",
                "title" : "case Index(UInt64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/prop\/key(_:)",
                "title" : "case Key(String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/prop\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/prop\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/prop",
            "title" : "Prop",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Creating a new Delete Sequence",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/deleteseq\/init(obj:index:length:)",
                "title" : "init(obj: ObjId, index: UInt64, length: UInt64)",
                "type" : "init"
              },
              {
                "title" : "Inspecting a Delete Sequence",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/deleteseq\/obj",
                "title" : "let obj: ObjId",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/deleteseq\/index",
                "title" : "let index: UInt64",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/deleteseq\/length",
                "title" : "let length: UInt64",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/deleteseq\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/deleteseq\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/deleteseq",
            "title" : "DeleteSeq",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/actorid\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/actorid\/init(data:)",
                "title" : "init?(data: Data)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automerge\/actorid\/init(uuid:)",
                "title" : "init(uuid: UUID)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/actorid\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/actorid\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/actorid\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/actorid\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/actorid",
            "title" : "ActorId",
            "type" : "struct"
          },
          {
            "title" : "Converting Scalar Values to Local Types",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Converting types to Scalar Value Representations",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvaluerepresentable\/toscalarvalue()",
                "title" : "func toScalarValue() -> ScalarValue",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvaluerepresentable\/fromscalarvalue(_:)",
                "title" : "static func fromScalarValue(ScalarValue) -> Result<Self, ConvertError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automerge\/scalarvaluerepresentable\/converterror",
                "title" : "ConvertError",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/automerge\/scalarvaluerepresentable",
            "title" : "ScalarValueRepresentable",
            "type" : "protocol"
          },
          {
            "title" : "Codable Errors",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/==(_:_:)",
                "title" : "static func == (CodingKeyLookupError, CodingKeyLookupError) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/automergedocerror(_:)",
                "title" : "case AutomergeDocError(Error)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/emptylistindex(_:)",
                "title" : "case EmptyListIndex(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/indexoutofbounds(_:)",
                "title" : "case IndexOutOfBounds(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/invalidindexlookup(_:)",
                "title" : "case InvalidIndexLookup(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/invalidpathelement(_:)",
                "title" : "case InvalidPathElement(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/invalidvaluelookup(_:)",
                "title" : "case InvalidValueLookup(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/mismatchedschema(_:)",
                "title" : "case MismatchedSchema(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/nopathforsinglevalue(_:)",
                "title" : "case NoPathForSingleValue(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/pathextendsthroughscalar(_:)",
                "title" : "case PathExtendsThroughScalar(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/pathextendsthroughtext(_:)",
                "title" : "case PathExtendsThroughText(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/schemamissing(_:)",
                "title" : "case SchemaMissing(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/unexpectedlookupfailure(_:)",
                "title" : "case UnexpectedLookupFailure(String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/codingkeylookuperror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/codingkeylookuperror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/codingkeylookuperror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/codingkeylookuperror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/codingkeylookuperror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/codingkeylookuperror",
            "title" : "CodingKeyLookupError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/pathparseerror\/emptylistindex(_:)",
                "title" : "case EmptyListIndex(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/pathparseerror\/invalidpathelement(_:)",
                "title" : "case InvalidPathElement(String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/pathparseerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathparseerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/pathparseerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathparseerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathparseerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/pathparseerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/pathparseerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/pathparseerror",
            "title" : "PathParseError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/bindingerror\/==(_:_:)",
                "title" : "static func == (BindingError, BindingError) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/bindingerror\/invalidpath(_:)",
                "title" : "case InvalidPath(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/bindingerror\/notcounter",
                "title" : "case NotCounter",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/bindingerror\/nottext",
                "title" : "case NotText",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/bindingerror\/unbound",
                "title" : "case Unbound",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/bindingerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bindingerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automerge\/bindingerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bindingerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/bindingerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bindingerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bindingerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bindingerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/bindingerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/bindingerror",
            "title" : "BindingError",
            "type" : "enum"
          },
          {
            "title" : "Document Errors",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/decodesyncstateerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/decodesyncstateerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/decodesyncstateerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/decodesyncstateerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/decodesyncstateerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/decodesyncstateerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/decodesyncstateerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/decodesyncstateerror",
            "title" : "DecodeSyncStateError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/docerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/docerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/docerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/docerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/docerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/docerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/docerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/docerror",
            "title" : "DocError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/loaderror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/loaderror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/loaderror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/loaderror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/loaderror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/loaderror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/loaderror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/loaderror",
            "title" : "LoadError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/receivesyncerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/receivesyncerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/receivesyncerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/receivesyncerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/receivesyncerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/receivesyncerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/receivesyncerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/receivesyncerror",
            "title" : "ReceiveSyncError",
            "type" : "struct"
          },
          {
            "title" : "Type Conversion Errors",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalueconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/scalarvalueconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalueconversionerror\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalueconversionerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalueconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/scalarvalueconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/scalarvalueconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/scalarvalueconversionerror",
            "title" : "ScalarValueConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/notboolscalarvalue(_:)",
                "title" : "case notboolScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/booleanscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/booleanscalarconversionerror",
            "title" : "BooleanScalarConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/notbytesscalarvalue(_:)",
                "title" : "case notbytesScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/bytesscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/bytesscalarconversionerror",
            "title" : "BytesScalarConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/intscalarconversionerror\/notintscalarvalue(_:)",
                "title" : "case notIntScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/intscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/intscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/intscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/intscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/intscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/intscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/intscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/intscalarconversionerror",
            "title" : "IntScalarConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/notf64scalarvalue(_:)",
                "title" : "case notF64ScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/floatingpointscalarconversionerror",
            "title" : "FloatingPointScalarConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/stringscalarconversionerror\/notstringscalarvalue(_:)",
                "title" : "case notstringScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/stringscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/stringscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/stringscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/stringscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/stringscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/stringscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/stringscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/stringscalarconversionerror",
            "title" : "StringScalarConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/nottimetampscalarvalue(_:)",
                "title" : "case notTimetampScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/timestampscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/timestampscalarconversionerror",
            "title" : "TimestampScalarConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/uintscalarconversionerror\/notuintscalarvalue(_:)",
                "title" : "case notUIntScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/uintscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/uintscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/uintscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/uintscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/uintscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/uintscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/uintscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/uintscalarconversionerror",
            "title" : "UIntScalarConversionError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/urlscalarconversionerror\/notmatchingurlscheme(_:)",
                "title" : "case notMatchingURLScheme(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automerge\/urlscalarconversionerror\/notstringscalarvalue(_:)",
                "title" : "case notStringScalarValue(ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automerge\/urlscalarconversionerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automerge\/urlscalarconversionerror\/failurereason",
                "title" : "var failureReason: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/urlscalarconversionerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/urlscalarconversionerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automerge\/urlscalarconversionerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automerge\/urlscalarconversionerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automerge\/urlscalarconversionerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automerge\/urlscalarconversionerror",
            "title" : "URLScalarConversionError",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/automerge",
        "title" : "Automerge",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/doc\/nopointer\/init()",
                    "title" : "init()",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/doc\/nopointer",
                "title" : "Doc.NoPointer",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/init(nopointer:)",
                "title" : "init(noPointer: NoPointer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/init(unsafefromrawpointer:)",
                "title" : "init(unsafeFromRawPointer: UnsafeMutableRawPointer)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/actorid()",
                "title" : "func actorId() -> ActorId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/applyencodedchanges(changes:)",
                "title" : "func applyEncodedChanges(changes: [UInt8]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/applyencodedchangeswithpatches(changes:)",
                "title" : "func applyEncodedChangesWithPatches(changes: [UInt8]) throws -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/changebyhash(hash:)",
                "title" : "func changeByHash(hash: ChangeHash) -> Change?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/changes()",
                "title" : "func changes() -> [ChangeHash]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/commitwith(msg:time:)",
                "title" : "func commitWith(msg: String?, time: Int64)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/cursor(obj:position:)",
                "title" : "func cursor(obj: ObjId, position: UInt64) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/cursorat(obj:position:heads:)",
                "title" : "func cursorAt(obj: ObjId, position: UInt64, heads: [ChangeHash]) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/cursorposition(obj:cursor:)",
                "title" : "func cursorPosition(obj: ObjId, cursor: Cursor) throws -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/cursorpositionat(obj:cursor:heads:)",
                "title" : "func cursorPositionAt(obj: ObjId, cursor: Cursor, heads: [ChangeHash]) throws -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/deleteinlist(obj:index:)",
                "title" : "func deleteInList(obj: ObjId, index: UInt64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/deleteinmap(obj:key:)",
                "title" : "func deleteInMap(obj: ObjId, key: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/difference(before:after:)",
                "title" : "func difference(before: [ChangeHash], after: [ChangeHash]) -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/encodechangessince(heads:)",
                "title" : "func encodeChangesSince(heads: [ChangeHash]) throws -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/encodenewchanges()",
                "title" : "func encodeNewChanges() -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/fork()",
                "title" : "func fork() -> Doc",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/forkat(heads:)",
                "title" : "func forkAt(heads: [ChangeHash]) throws -> Doc",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/generatesyncmessage(state:)",
                "title" : "func generateSyncMessage(state: SyncState) -> [UInt8]?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getallatinlist(obj:index:heads:)",
                "title" : "func getAllAtInList(obj: ObjId, index: UInt64, heads: [ChangeHash]) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getallatinmap(obj:key:heads:)",
                "title" : "func getAllAtInMap(obj: ObjId, key: String, heads: [ChangeHash]) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getallinlist(obj:index:)",
                "title" : "func getAllInList(obj: ObjId, index: UInt64) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getallinmap(obj:key:)",
                "title" : "func getAllInMap(obj: ObjId, key: String) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getatinlist(obj:index:heads:)",
                "title" : "func getAtInList(obj: ObjId, index: UInt64, heads: [ChangeHash]) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getatinmap(obj:key:heads:)",
                "title" : "func getAtInMap(obj: ObjId, key: String, heads: [ChangeHash]) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getinlist(obj:index:)",
                "title" : "func getInList(obj: ObjId, index: UInt64) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/getinmap(obj:key:)",
                "title" : "func getInMap(obj: ObjId, key: String) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/heads()",
                "title" : "func heads() -> [ChangeHash]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/incrementinlist(obj:index:by:)",
                "title" : "func incrementInList(obj: ObjId, index: UInt64, by: Int64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/incrementinmap(obj:key:by:)",
                "title" : "func incrementInMap(obj: ObjId, key: String, by: Int64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/insertinlist(obj:index:value:)",
                "title" : "func insertInList(obj: ObjId, index: UInt64, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/insertobjectinlist(obj:index:objtype:)",
                "title" : "func insertObjectInList(obj: ObjId, index: UInt64, objType: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/joinblock(obj:index:)",
                "title" : "func joinBlock(obj: ObjId, index: UInt32) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/length(obj:)",
                "title" : "func length(obj: ObjId) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/lengthat(obj:heads:)",
                "title" : "func lengthAt(obj: ObjId, heads: [ChangeHash]) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/mapentries(obj:)",
                "title" : "func mapEntries(obj: ObjId) throws -> [KeyValue]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/mapentriesat(obj:heads:)",
                "title" : "func mapEntriesAt(obj: ObjId, heads: [ChangeHash]) throws -> [KeyValue]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/mapkeys(obj:)",
                "title" : "func mapKeys(obj: ObjId) -> [String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/mapkeysat(obj:heads:)",
                "title" : "func mapKeysAt(obj: ObjId, heads: [ChangeHash]) -> [String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/mark(obj:start:end:expand:name:value:)",
                "title" : "func mark(obj: ObjId, start: UInt64, end: UInt64, expand: ExpandMark, name: String, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/marks(obj:)",
                "title" : "func marks(obj: ObjId) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/marksat(obj:heads:)",
                "title" : "func marksAt(obj: ObjId, heads: [ChangeHash]) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/marksatposition(obj:position:heads:)",
                "title" : "func marksAtPosition(obj: ObjId, position: Position, heads: [ChangeHash]) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/merge(other:)",
                "title" : "func merge(other: Doc) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/mergewithpatches(other:)",
                "title" : "func mergeWithPatches(other: Doc) throws -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/objecttype(obj:)",
                "title" : "func objectType(obj: ObjId) -> ObjType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/path(obj:)",
                "title" : "func path(obj: ObjId) throws -> [PathElement]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/putinlist(obj:index:value:)",
                "title" : "func putInList(obj: ObjId, index: UInt64, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/putinmap(obj:key:value:)",
                "title" : "func putInMap(obj: ObjId, key: String, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/putobjectinlist(obj:index:objtype:)",
                "title" : "func putObjectInList(obj: ObjId, index: UInt64, objType: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/putobjectinmap(obj:key:objtype:)",
                "title" : "func putObjectInMap(obj: ObjId, key: String, objType: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/receivesyncmessage(state:msg:)",
                "title" : "func receiveSyncMessage(state: SyncState, msg: [UInt8]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/receivesyncmessagewithpatches(state:msg:)",
                "title" : "func receiveSyncMessageWithPatches(state: SyncState, msg: [UInt8]) throws -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/save()",
                "title" : "func save() -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/setactor(actor:)",
                "title" : "func setActor(actor: ActorId)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/splice(obj:start:delete:values:)",
                "title" : "func splice(obj: ObjId, start: UInt64, delete: Int64, values: [ScalarValue]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/splicetext(obj:start:delete:chars:)",
                "title" : "func spliceText(obj: ObjId, start: UInt64, delete: Int64, chars: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/splitblock(obj:index:)",
                "title" : "func splitBlock(obj: ObjId, index: UInt32) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/text(obj:)",
                "title" : "func text(obj: ObjId) throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/textat(obj:heads:)",
                "title" : "func textAt(obj: ObjId, heads: [ChangeHash]) throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/unifficlonepointer()",
                "title" : "func uniffiClonePointer() -> UnsafeMutableRawPointer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/updatetext(obj:chars:)",
                "title" : "func updateText(obj: ObjId, chars: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/values(obj:)",
                "title" : "func values(obj: ObjId) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/valuesat(obj:heads:)",
                "title" : "func valuesAt(obj: ObjId, heads: [ChangeHash]) throws -> [Value]",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/load(bytes:)",
                "title" : "static func load(bytes: [UInt8]) throws -> Doc",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/doc\/newwithactor(actor:)",
                "title" : "static func newWithActor(actor: ActorId) -> Doc",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/doc",
            "title" : "Doc",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/syncstate\/nopointer\/init()",
                    "title" : "init()",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/syncstate\/nopointer",
                "title" : "SyncState.NoPointer",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/init(nopointer:)",
                "title" : "init(noPointer: NoPointer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/init(unsafefromrawpointer:)",
                "title" : "init(unsafeFromRawPointer: UnsafeMutableRawPointer)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/encode()",
                "title" : "func encode() -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/theirheads()",
                "title" : "func theirHeads() -> [ChangeHash]?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/unifficlonepointer()",
                "title" : "func uniffiClonePointer() -> UnsafeMutableRawPointer",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstate\/decode(bytes:)",
                "title" : "static func decode(bytes: [UInt8]) throws -> SyncState",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/syncstate",
            "title" : "SyncState",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/actorid()",
                "title" : "func actorId() -> ActorId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/applyencodedchanges(changes:)",
                "title" : "func applyEncodedChanges(changes: [UInt8]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/applyencodedchangeswithpatches(changes:)",
                "title" : "func applyEncodedChangesWithPatches(changes: [UInt8]) throws -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/changebyhash(hash:)",
                "title" : "func changeByHash(hash: ChangeHash) -> Change?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/changes()",
                "title" : "func changes() -> [ChangeHash]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/commitwith(msg:time:)",
                "title" : "func commitWith(msg: String?, time: Int64)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/cursor(obj:position:)",
                "title" : "func cursor(obj: ObjId, position: UInt64) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/cursorat(obj:position:heads:)",
                "title" : "func cursorAt(obj: ObjId, position: UInt64, heads: [ChangeHash]) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/cursorposition(obj:cursor:)",
                "title" : "func cursorPosition(obj: ObjId, cursor: Cursor) throws -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/cursorpositionat(obj:cursor:heads:)",
                "title" : "func cursorPositionAt(obj: ObjId, cursor: Cursor, heads: [ChangeHash]) throws -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/deleteinlist(obj:index:)",
                "title" : "func deleteInList(obj: ObjId, index: UInt64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/deleteinmap(obj:key:)",
                "title" : "func deleteInMap(obj: ObjId, key: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/difference(before:after:)",
                "title" : "func difference(before: [ChangeHash], after: [ChangeHash]) -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/encodechangessince(heads:)",
                "title" : "func encodeChangesSince(heads: [ChangeHash]) throws -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/encodenewchanges()",
                "title" : "func encodeNewChanges() -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/fork()",
                "title" : "func fork() -> Doc",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/forkat(heads:)",
                "title" : "func forkAt(heads: [ChangeHash]) throws -> Doc",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/generatesyncmessage(state:)",
                "title" : "func generateSyncMessage(state: SyncState) -> [UInt8]?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getallatinlist(obj:index:heads:)",
                "title" : "func getAllAtInList(obj: ObjId, index: UInt64, heads: [ChangeHash]) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getallatinmap(obj:key:heads:)",
                "title" : "func getAllAtInMap(obj: ObjId, key: String, heads: [ChangeHash]) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getallinlist(obj:index:)",
                "title" : "func getAllInList(obj: ObjId, index: UInt64) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getallinmap(obj:key:)",
                "title" : "func getAllInMap(obj: ObjId, key: String) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getatinlist(obj:index:heads:)",
                "title" : "func getAtInList(obj: ObjId, index: UInt64, heads: [ChangeHash]) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getatinmap(obj:key:heads:)",
                "title" : "func getAtInMap(obj: ObjId, key: String, heads: [ChangeHash]) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getinlist(obj:index:)",
                "title" : "func getInList(obj: ObjId, index: UInt64) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/getinmap(obj:key:)",
                "title" : "func getInMap(obj: ObjId, key: String) throws -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/heads()",
                "title" : "func heads() -> [ChangeHash]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/incrementinlist(obj:index:by:)",
                "title" : "func incrementInList(obj: ObjId, index: UInt64, by: Int64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/incrementinmap(obj:key:by:)",
                "title" : "func incrementInMap(obj: ObjId, key: String, by: Int64) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/insertinlist(obj:index:value:)",
                "title" : "func insertInList(obj: ObjId, index: UInt64, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/insertobjectinlist(obj:index:objtype:)",
                "title" : "func insertObjectInList(obj: ObjId, index: UInt64, objType: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/joinblock(obj:index:)",
                "title" : "func joinBlock(obj: ObjId, index: UInt32) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/length(obj:)",
                "title" : "func length(obj: ObjId) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/lengthat(obj:heads:)",
                "title" : "func lengthAt(obj: ObjId, heads: [ChangeHash]) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/mapentries(obj:)",
                "title" : "func mapEntries(obj: ObjId) throws -> [KeyValue]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/mapentriesat(obj:heads:)",
                "title" : "func mapEntriesAt(obj: ObjId, heads: [ChangeHash]) throws -> [KeyValue]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/mapkeys(obj:)",
                "title" : "func mapKeys(obj: ObjId) -> [String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/mapkeysat(obj:heads:)",
                "title" : "func mapKeysAt(obj: ObjId, heads: [ChangeHash]) -> [String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/mark(obj:start:end:expand:name:value:)",
                "title" : "func mark(obj: ObjId, start: UInt64, end: UInt64, expand: ExpandMark, name: String, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/marks(obj:)",
                "title" : "func marks(obj: ObjId) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/marksat(obj:heads:)",
                "title" : "func marksAt(obj: ObjId, heads: [ChangeHash]) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/marksatposition(obj:position:heads:)",
                "title" : "func marksAtPosition(obj: ObjId, position: Position, heads: [ChangeHash]) throws -> [Mark]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/merge(other:)",
                "title" : "func merge(other: Doc) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/mergewithpatches(other:)",
                "title" : "func mergeWithPatches(other: Doc) throws -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/objecttype(obj:)",
                "title" : "func objectType(obj: ObjId) -> ObjType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/path(obj:)",
                "title" : "func path(obj: ObjId) throws -> [PathElement]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/putinlist(obj:index:value:)",
                "title" : "func putInList(obj: ObjId, index: UInt64, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/putinmap(obj:key:value:)",
                "title" : "func putInMap(obj: ObjId, key: String, value: ScalarValue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/putobjectinlist(obj:index:objtype:)",
                "title" : "func putObjectInList(obj: ObjId, index: UInt64, objType: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/putobjectinmap(obj:key:objtype:)",
                "title" : "func putObjectInMap(obj: ObjId, key: String, objType: ObjType) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/receivesyncmessage(state:msg:)",
                "title" : "func receiveSyncMessage(state: SyncState, msg: [UInt8]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/receivesyncmessagewithpatches(state:msg:)",
                "title" : "func receiveSyncMessageWithPatches(state: SyncState, msg: [UInt8]) throws -> [Patch]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/save()",
                "title" : "func save() -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/setactor(actor:)",
                "title" : "func setActor(actor: ActorId)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/splice(obj:start:delete:values:)",
                "title" : "func splice(obj: ObjId, start: UInt64, delete: Int64, values: [ScalarValue]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/splicetext(obj:start:delete:chars:)",
                "title" : "func spliceText(obj: ObjId, start: UInt64, delete: Int64, chars: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/splitblock(obj:index:)",
                "title" : "func splitBlock(obj: ObjId, index: UInt32) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/text(obj:)",
                "title" : "func text(obj: ObjId) throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/textat(obj:heads:)",
                "title" : "func textAt(obj: ObjId, heads: [ChangeHash]) throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/updatetext(obj:chars:)",
                "title" : "func updateText(obj: ObjId, chars: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/values(obj:)",
                "title" : "func values(obj: ObjId) throws -> [Value]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docprotocol\/valuesat(obj:heads:)",
                "title" : "func valuesAt(obj: ObjId, heads: [ChangeHash]) throws -> [Value]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/docprotocol",
            "title" : "DocProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstateprotocol\/encode()",
                "title" : "func encode() -> [UInt8]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstateprotocol\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/syncstateprotocol\/theirheads()",
                "title" : "func theirHeads() -> [ChangeHash]?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/syncstateprotocol",
            "title" : "SyncStateProtocol",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/change\/init(actorid:message:deps:timestamp:bytes:hash:)",
                "title" : "init(actorId: ActorId, message: String?, deps: [ChangeHash], timestamp: Int64, bytes: [UInt8], hash: ChangeHash)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/change\/actorid",
                "title" : "var actorId: ActorId",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/change\/bytes",
                "title" : "var bytes: [UInt8]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/change\/deps",
                "title" : "var deps: [ChangeHash]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/change\/hash",
                "title" : "var hash: ChangeHash",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/change\/message",
                "title" : "var message: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/change\/timestamp",
                "title" : "var timestamp: Int64",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/change\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/change\/==(_:_:)",
                    "title" : "static func == (Change, Change) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/change\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/change\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/change\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/change",
            "title" : "Change",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeactorid\/lift(_:)",
                "title" : "static func lift(RustBuffer) throws -> ActorId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeactorid\/lower(_:)",
                "title" : "static func lower(ActorId) -> RustBuffer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeactorid\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> ActorId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeactorid\/write(_:into:)",
                "title" : "static func write(ActorId, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeactorid",
            "title" : "FfiConverterTypeActorId",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypechange\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Change",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypechange\/write(_:into:)",
                "title" : "static func write(Change, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypechange",
            "title" : "FfiConverterTypeChange",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypechangehash\/lift(_:)",
                "title" : "static func lift(RustBuffer) throws -> ChangeHash",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypechangehash\/lower(_:)",
                "title" : "static func lower(ChangeHash) -> RustBuffer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypechangehash\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> ChangeHash",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypechangehash\/write(_:into:)",
                "title" : "static func write(ChangeHash, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypechangehash",
            "title" : "FfiConverterTypeChangeHash",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypecursor\/lift(_:)",
                "title" : "static func lift(RustBuffer) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypecursor\/lower(_:)",
                "title" : "static func lower(Cursor) -> RustBuffer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypecursor\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Cursor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypecursor\/write(_:into:)",
                "title" : "static func write(Cursor, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypecursor",
            "title" : "FfiConverterTypeCursor",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedecodesyncstateerror\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> DecodeSyncStateError",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedecodesyncstateerror\/write(_:into:)",
                "title" : "static func write(DecodeSyncStateError, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypedecodesyncstateerror",
            "title" : "FfiConverterTypeDecodeSyncStateError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedoc\/lift(_:)",
                "title" : "static func lift(UnsafeMutableRawPointer) throws -> Doc",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedoc\/lower(_:)",
                "title" : "static func lower(Doc) -> UnsafeMutableRawPointer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedoc\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Doc",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedoc\/write(_:into:)",
                "title" : "static func write(Doc, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypedoc",
            "title" : "FfiConverterTypeDoc",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedocerror\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> DocError",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypedocerror\/write(_:into:)",
                "title" : "static func write(DocError, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypedocerror",
            "title" : "FfiConverterTypeDocError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeexpandmark\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> ExpandMark",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeexpandmark\/write(_:into:)",
                "title" : "static func write(ExpandMark, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeexpandmark",
            "title" : "FfiConverterTypeExpandMark",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypekeyvalue\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> KeyValue",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypekeyvalue\/write(_:into:)",
                "title" : "static func write(KeyValue, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypekeyvalue",
            "title" : "FfiConverterTypeKeyValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeloaderror\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> LoadError",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeloaderror\/write(_:into:)",
                "title" : "static func write(LoadError, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeloaderror",
            "title" : "FfiConverterTypeLoadError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypemark\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Mark",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypemark\/write(_:into:)",
                "title" : "static func write(Mark, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypemark",
            "title" : "FfiConverterTypeMark",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjid\/lift(_:)",
                "title" : "static func lift(RustBuffer) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjid\/lower(_:)",
                "title" : "static func lower(ObjId) -> RustBuffer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjid\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> ObjId",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjid\/write(_:into:)",
                "title" : "static func write(ObjId, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjid",
            "title" : "FfiConverterTypeObjId",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjtype\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> ObjType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjtype\/write(_:into:)",
                "title" : "static func write(ObjType, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjtype",
            "title" : "FfiConverterTypeObjType",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatch\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Patch",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatch\/write(_:into:)",
                "title" : "static func write(Patch, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatch",
            "title" : "FfiConverterTypePatch",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatchaction\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> PatchAction",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatchaction\/write(_:into:)",
                "title" : "static func write(PatchAction, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatchaction",
            "title" : "FfiConverterTypePatchAction",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypepathelement\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> PathElement",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypepathelement\/write(_:into:)",
                "title" : "static func write(PathElement, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepathelement",
            "title" : "FfiConverterTypePathElement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeposition\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Position",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeposition\/write(_:into:)",
                "title" : "static func write(Position, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeposition",
            "title" : "FfiConverterTypePosition",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeprop\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Prop",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypeprop\/write(_:into:)",
                "title" : "static func write(Prop, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeprop",
            "title" : "FfiConverterTypeProp",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypereceivesyncerror\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> ReceiveSyncError",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypereceivesyncerror\/write(_:into:)",
                "title" : "static func write(ReceiveSyncError, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypereceivesyncerror",
            "title" : "FfiConverterTypeReceiveSyncError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypescalarvalue\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> ScalarValue",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypescalarvalue\/write(_:into:)",
                "title" : "static func write(ScalarValue, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypescalarvalue",
            "title" : "FfiConverterTypeScalarValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypesyncstate\/lift(_:)",
                "title" : "static func lift(UnsafeMutableRawPointer) throws -> SyncState",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypesyncstate\/lower(_:)",
                "title" : "static func lower(SyncState) -> UnsafeMutableRawPointer",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypesyncstate\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> SyncState",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypesyncstate\/write(_:into:)",
                "title" : "static func write(SyncState, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypesyncstate",
            "title" : "FfiConverterTypeSyncState",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypevalue\/read(from:)",
                "title" : "static func read(from: inout (data: Data, offset: Data.Index)) throws -> Value",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/fficonvertertypevalue\/write(_:into:)",
                "title" : "static func write(Value, into: inout [UInt8])",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypevalue",
            "title" : "FfiConverterTypeValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/keyvalue\/init(key:value:)",
                "title" : "init(key: String, value: Value)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/keyvalue\/key",
                "title" : "var key: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/keyvalue\/value",
                "title" : "var value: Value",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/keyvalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/keyvalue\/==(_:_:)",
                    "title" : "static func == (KeyValue, KeyValue) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/keyvalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/keyvalue\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/keyvalue\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/keyvalue",
            "title" : "KeyValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/mark\/init(start:end:name:value:)",
                "title" : "init(start: UInt64, end: UInt64, name: String, value: ScalarValue)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/mark\/end",
                "title" : "var end: UInt64",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/mark\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/mark\/start",
                "title" : "var start: UInt64",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/mark\/value",
                "title" : "var value: ScalarValue",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/mark\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/mark\/==(_:_:)",
                    "title" : "static func == (Mark, Mark) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/mark\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/mark\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/mark\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/mark",
            "title" : "Mark",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patch\/init(path:action:)",
                "title" : "init(path: [PathElement], action: PatchAction)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patch\/action",
                "title" : "var action: PatchAction",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patch\/path",
                "title" : "var path: [PathElement]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/patch\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/patch\/==(_:_:)",
                    "title" : "static func == (Patch, Patch) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/patch\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/patch\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/patch\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/patch",
            "title" : "Patch",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/pathelement\/init(prop:obj:)",
                "title" : "init(prop: Prop, obj: ObjId)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/pathelement\/obj",
                "title" : "var obj: ObjId",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/pathelement\/prop",
                "title" : "var prop: Prop",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/pathelement\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/pathelement\/==(_:_:)",
                    "title" : "static func == (PathElement, PathElement) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/pathelement\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/pathelement\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/pathelement\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/pathelement",
            "title" : "PathElement",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeactorid_lift(_:)",
            "title" : "func FfiConverterTypeActorId_lift(RustBuffer) throws -> ActorId",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeactorid_lower(_:)",
            "title" : "func FfiConverterTypeActorId_lower(ActorId) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypechangehash_lift(_:)",
            "title" : "func FfiConverterTypeChangeHash_lift(RustBuffer) throws -> ChangeHash",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypechangehash_lower(_:)",
            "title" : "func FfiConverterTypeChangeHash_lower(ChangeHash) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypechange_lift(_:)",
            "title" : "func FfiConverterTypeChange_lift(RustBuffer) throws -> Change",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypechange_lower(_:)",
            "title" : "func FfiConverterTypeChange_lower(Change) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypecursor_lift(_:)",
            "title" : "func FfiConverterTypeCursor_lift(RustBuffer) throws -> Cursor",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypecursor_lower(_:)",
            "title" : "func FfiConverterTypeCursor_lower(Cursor) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypedoc_lift(_:)",
            "title" : "func FfiConverterTypeDoc_lift(UnsafeMutableRawPointer) throws -> Doc",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypedoc_lower(_:)",
            "title" : "func FfiConverterTypeDoc_lower(Doc) -> UnsafeMutableRawPointer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeexpandmark_lift(_:)",
            "title" : "func FfiConverterTypeExpandMark_lift(RustBuffer) throws -> ExpandMark",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeexpandmark_lower(_:)",
            "title" : "func FfiConverterTypeExpandMark_lower(ExpandMark) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypekeyvalue_lift(_:)",
            "title" : "func FfiConverterTypeKeyValue_lift(RustBuffer) throws -> KeyValue",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypekeyvalue_lower(_:)",
            "title" : "func FfiConverterTypeKeyValue_lower(KeyValue) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypemark_lift(_:)",
            "title" : "func FfiConverterTypeMark_lift(RustBuffer) throws -> Mark",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypemark_lower(_:)",
            "title" : "func FfiConverterTypeMark_lower(Mark) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjid_lift(_:)",
            "title" : "func FfiConverterTypeObjId_lift(RustBuffer) throws -> ObjId",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjid_lower(_:)",
            "title" : "func FfiConverterTypeObjId_lower(ObjId) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjtype_lift(_:)",
            "title" : "func FfiConverterTypeObjType_lift(RustBuffer) throws -> ObjType",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeobjtype_lower(_:)",
            "title" : "func FfiConverterTypeObjType_lower(ObjType) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatchaction_lift(_:)",
            "title" : "func FfiConverterTypePatchAction_lift(RustBuffer) throws -> PatchAction",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatchaction_lower(_:)",
            "title" : "func FfiConverterTypePatchAction_lower(PatchAction) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatch_lift(_:)",
            "title" : "func FfiConverterTypePatch_lift(RustBuffer) throws -> Patch",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepatch_lower(_:)",
            "title" : "func FfiConverterTypePatch_lower(Patch) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepathelement_lift(_:)",
            "title" : "func FfiConverterTypePathElement_lift(RustBuffer) throws -> PathElement",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypepathelement_lower(_:)",
            "title" : "func FfiConverterTypePathElement_lower(PathElement) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeposition_lift(_:)",
            "title" : "func FfiConverterTypePosition_lift(RustBuffer) throws -> Position",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeposition_lower(_:)",
            "title" : "func FfiConverterTypePosition_lower(Position) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeprop_lift(_:)",
            "title" : "func FfiConverterTypeProp_lift(RustBuffer) throws -> Prop",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypeprop_lower(_:)",
            "title" : "func FfiConverterTypeProp_lower(Prop) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypescalarvalue_lift(_:)",
            "title" : "func FfiConverterTypeScalarValue_lift(RustBuffer) throws -> ScalarValue",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypescalarvalue_lower(_:)",
            "title" : "func FfiConverterTypeScalarValue_lower(ScalarValue) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypesyncstate_lift(_:)",
            "title" : "func FfiConverterTypeSyncState_lift(UnsafeMutableRawPointer) throws -> SyncState",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypesyncstate_lower(_:)",
            "title" : "func FfiConverterTypeSyncState_lower(SyncState) -> UnsafeMutableRawPointer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypevalue_lift(_:)",
            "title" : "func FfiConverterTypeValue_lift(RustBuffer) throws -> Value",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/fficonvertertypevalue_lower(_:)",
            "title" : "func FfiConverterTypeValue_lower(Value) -> RustBuffer",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/root()",
            "title" : "func root() -> ObjId",
            "type" : "func"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/actorid",
            "title" : "ActorId",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/changehash",
            "title" : "ChangeHash",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/cursor",
            "title" : "Cursor",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/automergeuniffi\/objid",
            "title" : "ObjId",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/decodesyncstateerror\/internal(message:)",
                "title" : "case Internal(message: String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/decodesyncstateerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/decodesyncstateerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/decodesyncstateerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/decodesyncstateerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/decodesyncstateerror",
            "title" : "DecodeSyncStateError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docerror\/internal(message:)",
                "title" : "case Internal(message: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/docerror\/wrongobjecttype(message:)",
                "title" : "case WrongObjectType(message: String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/docerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/docerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/docerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/docerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/docerror\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/docerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/docerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/docerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/docerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/docerror",
            "title" : "DocError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/expandmark\/after",
                "title" : "case after",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/expandmark\/before",
                "title" : "case before",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/expandmark\/both",
                "title" : "case both",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/expandmark\/none",
                "title" : "case none",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/expandmark\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/expandmark\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/expandmark",
            "title" : "ExpandMark",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/loaderror\/internal(message:)",
                "title" : "case Internal(message: String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/loaderror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/loaderror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/loaderror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/loaderror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/loaderror",
            "title" : "LoadError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/objtype\/list",
                "title" : "case list",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/objtype\/map",
                "title" : "case map",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/objtype\/text",
                "title" : "case text",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/objtype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/objtype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/objtype",
            "title" : "ObjType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/conflict(obj:prop:)",
                "title" : "case conflict(obj: ObjId, prop: Prop)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/deletemap(obj:key:)",
                "title" : "case deleteMap(obj: ObjId, key: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/deleteseq(obj:index:length:)",
                "title" : "case deleteSeq(obj: ObjId, index: UInt64, length: UInt64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/increment(obj:prop:value:)",
                "title" : "case increment(obj: ObjId, prop: Prop, value: Int64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/insert(obj:index:values:)",
                "title" : "case insert(obj: ObjId, index: UInt64, values: [Value])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/marks(obj:marks:)",
                "title" : "case marks(obj: ObjId, marks: [Mark])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/put(obj:prop:value:)",
                "title" : "case put(obj: ObjId, prop: Prop, value: Value)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/patchaction\/splicetext(obj:index:value:marks:)",
                "title" : "case spliceText(obj: ObjId, index: UInt64, value: String, marks: [String : Value])",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/patchaction\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/patchaction\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/patchaction",
            "title" : "PatchAction",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/position\/cursor(position:)",
                "title" : "case cursor(position: Cursor)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/position\/index(position:)",
                "title" : "case index(position: UInt64)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/position\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/position\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/position",
            "title" : "Position",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/prop\/index(value:)",
                "title" : "case index(value: UInt64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/prop\/key(value:)",
                "title" : "case key(value: String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/prop\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/prop\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/prop",
            "title" : "Prop",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/receivesyncerror\/internal(message:)",
                "title" : "case Internal(message: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/receivesyncerror\/invalidmessage(message:)",
                "title" : "case InvalidMessage(message: String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/receivesyncerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/receivesyncerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/receivesyncerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/receivesyncerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/receivesyncerror",
            "title" : "ReceiveSyncError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/boolean(value:)",
                "title" : "case boolean(value: Bool)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/bytes(value:)",
                "title" : "case bytes(value: [UInt8])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/counter(value:)",
                "title" : "case counter(value: Int64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/f64(value:)",
                "title" : "case f64(value: Double)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/int(value:)",
                "title" : "case int(value: Int64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/null",
                "title" : "case null",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/string(value:)",
                "title" : "case string(value: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/timestamp(value:)",
                "title" : "case timestamp(value: Int64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/uint(value:)",
                "title" : "case uint(value: UInt64)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/unknown(typecode:data:)",
                "title" : "case unknown(typeCode: UInt8, data: [UInt8])",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/scalarvalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/scalarvalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/scalarvalue",
            "title" : "ScalarValue",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/value\/object(typ:id:)",
                "title" : "case object(typ: ObjType, id: ObjId)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/automergeuniffi\/value\/scalar(value:)",
                "title" : "case scalar(value: ScalarValue)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/automergeuniffi\/value\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/automergeuniffi\/value\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/automergeuniffi\/value",
            "title" : "Value",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/automergeuniffi",
        "title" : "AutomergeUniffi",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 2
  }
}